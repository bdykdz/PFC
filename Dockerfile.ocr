# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY prisma ./prisma/

# Install all dependencies
RUN npm ci

# Copy app files
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Set a dummy DATABASE_URL for build time (not used at runtime)
ENV DATABASE_URL="postgresql://dummy:dummy@dummy:5432/dummy"

# Build the application
RUN npm run build

# Production stage with OCR support
FROM node:20-alpine AS runner

WORKDIR /app

# Install Tesseract and language packs
RUN apk add --no-cache \
    tesseract-ocr \
    tesseract-ocr-data-ron \
    tesseract-ocr-data-eng \
    tesseract-ocr-data-por \
    tesseract-ocr-data-fra \
    tesseract-ocr-data-deu \
    tesseract-ocr-data-hin \
    poppler-utils \
    && rm -rf /var/cache/apk/*

# Add non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/@prisma ./node_modules/@prisma
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma

# Create tmp directory for document processing
RUN mkdir -p tmp && chown nextjs:nodejs tmp

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV NODE_ENV production

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

CMD ["node", "server.js"]