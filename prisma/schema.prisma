generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users who can login to the application
model User {
  id                  String     @id @default(uuid())
  email               String     @unique
  name                String
  azure_id            String?    @unique
  role                String     @default("viewer") // viewer, editor, manager, admin
  status              String     @default("active") // active or inactive
  last_login          DateTime?
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt
  
  // Relations
  created_employees   Employee[] @relation("EmployeeCreatedBy")
  updated_employees   Employee[] @relation("EmployeeUpdatedBy")
  audit_logs          AuditLog[]
  
  // NextAuth relations
  accounts            Account[]
  sessions            Session[]
  
  @@map("users")
}

// Employee profiles (all employees from AD and manually added)
model Employee {
  id                  String     @id @default(uuid())
  email               String     @unique
  name                String
  phone               String?
  azure_id            String?    @unique
  contract_type       String?    // CIM, PFA, or SRL
  company             String?
  department          String?
  expertise           String?
  general_experience  DateTime?  // Date when they started their career
  observations        String?    @db.Text
  profile_image_url   String?
  
  // Tracking who manages this profile
  created_by_id       String?
  created_by          User?      @relation("EmployeeCreatedBy", fields: [created_by_id], references: [id])
  updated_by_id       String?
  updated_by          User?      @relation("EmployeeUpdatedBy", fields: [updated_by_id], references: [id])
  
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt
  
  // Relations
  contracts           Contract[]
  diplomas            Diploma[]
  skills              Skill[]
  documents           Document[]
  
  @@map("employees")
}

model Contract {
  id              String              @id @default(uuid())
  employee_id     String
  name            String              // Contract name/title
  description     String?             @db.Text
  location        String?
  beneficiary     String?             // Client/company name
  position        String?             // Job position
  contract_number String?
  start_date      DateTime
  end_date        DateTime?
  created_at      DateTime            @default(now())
  updated_at      DateTime            @updatedAt
  
  employee        Employee            @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  documents       ContractDocument[]
  
  @@map("contracts")
}

model ContractDocument {
  id              String    @id @default(uuid())
  contract_id     String
  name            String
  file_url        String
  uploaded_at     DateTime  @default(now())
  
  contract        Contract  @relation(fields: [contract_id], references: [id], onDelete: Cascade)
  
  @@map("contract_documents")
}

model Diploma {
  id              String             @id @default(uuid())
  employee_id     String
  name            String             // Diploma name/title
  issuer          String             // Institution that issued it
  issue_date      DateTime
  expiry_date     DateTime?          // For certifications that expire
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  
  employee        Employee           @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  documents       DiplomaDocument[]
  
  @@map("diplomas")
}

model DiplomaDocument {
  id              String    @id @default(uuid())
  diploma_id      String
  name            String
  file_url        String
  uploaded_at     DateTime  @default(now())
  
  diploma         Diploma   @relation(fields: [diploma_id], references: [id], onDelete: Cascade)
  
  @@map("diploma_documents")
}

model Skill {
  id              String    @id @default(uuid())
  employee_id     String
  name            String
  level           String    // Începător, Intermediar, or Expert
  type            String    // Soft or Hard
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  employee        Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  
  @@map("skills")
}

model Document {
  id              String    @id @default(uuid())
  employee_id     String
  name            String
  file_url        String
  uploaded_at     DateTime  @default(now())
  
  employee        Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  
  @@map("documents")
}

model AuditLog {
  id              String          @id @default(uuid())
  user_id         String?
  action          String
  resource_type   String
  resource_id     String?
  changes         Json?
  ip_address      String?
  user_agent      String?
  created_at      DateTime        @default(now())
  
  user            User?           @relation(fields: [user_id], references: [id])
  
  @@map("audit_logs")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}