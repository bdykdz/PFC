generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid())
  email           String     @unique
  name            String
  azure_id        String?    @unique
  contract_type   String?
  profile_image_url String?
  role            String     @default("viewer")
  created_by      String?
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  
  created_users   User[]     @relation("UserCreatedBy")
  creator         User?      @relation("UserCreatedBy", fields: [created_by], references: [id])
  contracts       Contract[]
  diplomas        Diploma[]
  user_skills     UserSkill[]
  audit_logs      AuditLog[]
  
  created_contracts Contract[] @relation("ContractCreatedBy")
  created_diplomas  Diploma[]  @relation("DiplomaCreatedBy")
  
  // NextAuth relations
  accounts       Account[]
  sessions       Session[]
  
  @@map("users")
}

model Contract {
  id              String    @id @default(uuid())
  user_id         String
  contract_number String?
  start_date      DateTime
  end_date        DateTime?
  document_url    String?
  created_by      String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  creator         User?     @relation("ContractCreatedBy", fields: [created_by], references: [id])
  
  @@map("contracts")
}

model Diploma {
  id              String    @id @default(uuid())
  user_id         String
  title           String
  institution     String?
  issue_date      DateTime?
  document_url    String?
  created_by      String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  creator         User?     @relation("DiplomaCreatedBy", fields: [created_by], references: [id])
  
  @@map("diplomas")
}

model Skill {
  id              String      @id @default(uuid())
  name            String      @unique
  category        String?
  created_at      DateTime    @default(now())
  
  user_skills     UserSkill[]
  
  @@map("skills")
}

model UserSkill {
  user_id         String
  skill_id        String
  proficiency_level Int?
  years_experience Int?
  created_at      DateTime    @default(now())
  
  user            User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  skill           Skill       @relation(fields: [skill_id], references: [id], onDelete: Cascade)
  
  @@id([user_id, skill_id])
  @@map("user_skills")
}

model Role {
  id              String          @id @default(uuid())
  name            String          @unique
  description     String?
  created_at      DateTime        @default(now())
  
  role_permissions RolePermission[]
  
  @@map("roles")
}

model Permission {
  id              String          @id @default(uuid())
  resource        String
  action          String
  description     String?
  created_at      DateTime        @default(now())
  
  role_permissions RolePermission[]
  
  @@unique([resource, action])
  @@map("permissions")
}

model RolePermission {
  role_id         String
  permission_id   String
  created_at      DateTime        @default(now())
  
  role            Role            @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission      Permission      @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  
  @@id([role_id, permission_id])
  @@map("role_permissions")
}

model AuditLog {
  id              String          @id @default(uuid())
  user_id         String?
  action          String
  resource_type   String
  resource_id     String?
  changes         Json?
  ip_address      String?
  user_agent      String?
  created_at      DateTime        @default(now())
  
  user            User?           @relation(fields: [user_id], references: [id])
  
  @@map("audit_logs")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}